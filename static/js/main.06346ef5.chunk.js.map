{"version":3,"sources":["components/Button/index.js","components/InputField/index.js","components/CheckBoxButton/index.js","components/DialogModal/index.js","App.js","index.js"],"names":["Button","handleClick","buttonClick","props","className","this","buttonClassName","onClick","buttonLabel","Component","InputField","handleEnter","event","keyCode","inputLabelOnKey","inputLabelClassName","maxLength","inputMaxLength","size","inputSize","value","InputFieldValue","onKeyDown","CheckBoxButton","handleOnChangeEvent","console","log","checkBoxButtonChange","type","checkBoxClassName","id","taskCheckboxId","name","checkBoxButtonLabel","onChange","checked","checkBoxChecked","checkBoxLabelClassName","data-content","DialogModal","state","isOpen","style","display","ref","el","element","children","modals","open","e","preventDefault","find","x","setState","close","App","addButtonClick","showAddTaskLabel","addTaskEnter","toDoTaskList","updatedList","key","length","target","moveElementBetweenList","fromList","toList","foundIndex","strikeValue","filter","index","undefined","splice","push","checkBoxToDoTaskChange","completedTaskList","updatedCompletedList","checkBoxCompletedTaskChange","map","task","completedTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06346ef5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Button extends Component {\n  handleClick = () => {\n    const { buttonClick } = this.props;\n    buttonClick(); //Actual call of the passed function from props\n  };\n\n  render() {\n    return (\n      <button className={this.props.buttonClassName} onClick={this.handleClick}>\n        {this.props.buttonLabel}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\n\nclass InputField extends Component {\n  handleEnter = (event) => {\n    if (event.keyCode === 13) {\n      const { inputLabelOnKey } = this.props;\n      inputLabelOnKey(event);\n    }\n  };\n\n  render() {\n    return (\n      <input\n        className={this.props.inputLabelClassName}\n        maxLength={this.props.inputMaxLength}\n        size={this.props.inputSize}\n        value={this.props.InputFieldValue}\n        onKeyDown={this.handleEnter}\n      />\n    );\n  }\n}\n\nexport default InputField;\n","import React, { Component } from \"react\";\n\nclass CheckBoxButton extends Component {\n  handleOnChangeEvent = (event) => {\n    console.log(\"props:\", this.props, \"event\", event);\n    const { checkBoxButtonChange } = this.props;\n    checkBoxButtonChange(event);\n  };\n\n  render() {\n    return (\n      <div key={this.props.taskCheckboxId}>\n        <input\n          type=\"checkbox\"\n          className={this.props.checkBoxClassName}\n          id={this.props.taskCheckboxId}\n          name={this.props.checkBoxButtonLabel}\n          value={this.props.checkBoxButtonLabel}\n          onChange={this.handleOnChangeEvent}\n          checked={this.props.checkBoxChecked}\n        />\n\n        <label\n          className={this.props.checkBoxLabelClassName}\n          data-content={this.props.checkBoxButtonLabel}\n        >\n          {this.props.checkBoxButtonLabel}\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default CheckBoxButton;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./style.scss\";\n\nconst propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nclass DialogModal extends Component {\n  static modals = [];\n\n  static open = (id) => (e) => {\n    e.preventDefault();\n\n    // open modal specified by id\n    let modal = DialogModal.modals.find((x) => x.props.id === id);\n    modal.setState({ isOpen: true });\n    // document.body.classList.add(\"jw-modal-open\");\n  };\n\n  static close = (id) => (e) => {\n    // e.preventDefault();\n\n    // close modal specified by id\n    let modal = DialogModal.modals.find((x) => x.props.id === id);\n    // this.setState({ isOpen: false });\n    // document.body.classList.remove(\"jw-modal-open\");\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: true };\n  }\n\n  // componentDidMount() {\n  //   // move element to bottom of page (just before </body>) so it can be displayed above everything else\n  //   // document.body.appendChild(this.element);\n\n  //   // add this modal instance to the modal service so it's accessible from other components\n  //   DialogModal.modals.push(this);\n  // }\n\n  //   componentWillUnmount() {\n  //     // remove this modal instance from modal service\n  //     DialogModal.modals = DialogModal.modals.filter(\n  //       (x) => x.props.id !== this.props.id\n  //     );\n  //     this.element.remove();\n  //   }\n\n  //   handleClick = (e) => {\n  //     // close modal on background click\n  //     if (e.target.className === \"jw-modal\") {\n  //       DialogModal.close(this.props.id)(e);\n  //     }\n  //   };\n\n  render() {\n    return (\n      <div\n        style={{ display: +this.state.isOpen ? \"\" : \"none\" }}\n        onClick={this.handleClick}\n        ref={(el) => (this.element = el)}\n      >\n        <div className=\"jw-modal\">\n          <div className=\"jw-modal-body\">{this.props.children}</div>\n        </div>\n        <div className=\"jw-modal-background\"></div>\n      </div>\n    );\n  }\n}\n\nDialogModal.propTypes = propTypes;\n\nexport default DialogModal;\n","import \"./App.css\";\nimport \"./App.scss\";\nimport Button from \"./components/Button\";\nimport InputField from \"./components/InputField\";\nimport CheckBoxButton from \"./components/CheckBoxButton\";\nimport DialogModal from \"./components/DialogModal\";\n\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showAddTaskLabel: false,\n      toDoTaskList: [],\n      completedTaskList: [],\n    };\n  }\n\n  addButtonClick = () => {\n    this.setState({ showAddTaskLabel: true });\n  };\n\n  addTaskEnter = (event) => {\n    const { toDoTaskList } = this.state;\n    const updatedList = [\n      ...toDoTaskList,\n      {\n        key: toDoTaskList.length + 1 + event.target.value,\n        value: event.target.value,\n      },\n    ];\n    DialogModal.close(\"my-custom-modal\");\n    this.setState({ showAddTaskLabel: false, toDoTaskList: updatedList });\n  };\n\n  moveElementBetweenList = (fromList, toList, event) => {\n    const { checked, id } = event.target;\n    let foundIndex;\n    let strikeValue = fromList.filter((element, index) => {\n      if (element.key === id) {\n        foundIndex = index;\n      }\n      return element.key === id;\n    })[0];\n\n    if (strikeValue === undefined) {\n      return false;\n    }\n\n    fromList.splice(foundIndex, 1);\n    toList.push(strikeValue);\n\n    return { fromList, toList };\n  };\n\n  checkBoxToDoTaskChange = (event) => {\n    const { toDoTaskList, completedTaskList } = this.state;\n    const updatedList = [...toDoTaskList];\n    const updatedCompletedList = [...completedTaskList];\n\n    const { fromList, toList } = this.moveElementBetweenList(\n      updatedList,\n      updatedCompletedList,\n      event\n    );\n\n    this.setState({\n      toDoTaskList: fromList,\n      completedTaskList: toList,\n    });\n  };\n\n  checkBoxCompletedTaskChange = (event) => {\n    const { toDoTaskList, completedTaskList } = this.state;\n    const updatedList = [...toDoTaskList];\n    const updatedCompletedList = [...completedTaskList];\n\n    const { fromList, toList } = this.moveElementBetweenList(\n      updatedCompletedList,\n      updatedList,\n      event\n    );\n\n    this.setState({\n      toDoTaskList: toList,\n      completedTaskList: fromList,\n    });\n  };\n\n  render() {\n    const { showAddTaskLabel } = this.state;\n    console.log(this.state);\n    return (\n      <div>\n        <Button\n          buttonClassName=\"button\"\n          buttonClick={this.addButtonClick}\n          buttonLabel=\"+ Create a Task\"\n        />\n        {showAddTaskLabel && (\n          <DialogModal id=\"my-custom-modal\">\n            <h1>Provide task detail (Limit 50 characters)</h1>\n            <InputField\n              inputLabelClassName=\"addTextInput\"\n              inputMaxLength=\"50\"\n              inputSize=\"70\"\n              inputLabelOnKey={this.addTaskEnter}\n            />\n            {/* <Button\n              buttonClassName=\"button\"\n              buttonClick={DialogModal.close(\"my-custom-modal\")}\n              buttonLabel=\"Close\"\n            /> */}\n          </DialogModal>\n        )}\n        <h3>To Do Items</h3>\n        {this.state.toDoTaskList.map((task) => (\n          <CheckBoxButton\n            key={task.key}\n            taskCheckboxId={task.key}\n            checkBoxButtonLabel={task.value}\n            checkBoxButtonChange={this.checkBoxToDoTaskChange}\n            checkBoxClassName=\"checkbox\"\n            checkBoxLabelClassName=\"label\"\n          />\n        ))}\n\n        <h3>Completed Items</h3>\n        {this.state.completedTaskList.map((completedTask) => (\n          <CheckBoxButton\n            key={completedTask.key}\n            taskCheckboxId={completedTask.key}\n            checkBoxButtonLabel={completedTask.value}\n            checkBoxButtonChange={this.checkBoxCompletedTaskChange}\n            checkBoxChecked={true}\n            checkBoxClassName=\"checkbox\"\n            checkBoxLabelClassName=\"label\"\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}